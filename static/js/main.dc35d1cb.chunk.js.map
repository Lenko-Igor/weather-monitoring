{"version":3,"sources":["context.js","components/Block.js","components/Content.js","components/Widget.js","App.js","index.js"],"names":["Context","React","createContext","Block","props","useContext","removeCity","updateDate","city","iconUrl","icon","styles","arrow","display","width","transform","windDeg","className","temp","src","alt","description","humidity","pressure","wind","style","update","join","onClick","e","preventDefault","Content","dataArr","map","i","Widget","useState","visible","setVisible","data","setData","useEffect","sort","a","b","minTemp","filter","maxTemp","length","toOpenClose","App","months","checked","setChecked","listCitys","setListCitys","getData","apiQuery","apiURL","fetch","response","json","date","Date","name","main","weather","speed","deg","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","console","log","localDataArr","localStorage","getItem","localDataCitys","JSON","parse","setItem","stringify","interval","setInterval","then","updateAllData","clearInterval","Provider","value","removeArr","elem","Container","Row","id","type","autoComplete","placeholder","inp","document","querySelector","Data","some","dataCity","onChange","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.dc35d1cb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context","import React, {useContext} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './block.css'\r\nimport Context from '../context'\r\n\r\n\r\nfunction Block({props}){\r\n  const {removeCity, updateDate} = useContext(Context)\r\n  const city = props.city\r\n  const iconUrl = \"http://openweathermap.org/img/w/\" + props.icon + \".png\"\r\n  const styles = {\r\n    arrow: {\r\n      display: 'inline-block', \r\n      width: '25px', \r\n      transform: `rotate(${props.windDeg}deg)`\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"block\">\r\n      <h2>Город:<span> {props.city}</span></h2>\r\n      <ul>\r\n        <li>Температура:<span> {props.temp}°C</span><span><img src={iconUrl} alt={props.description}/></span></li>\r\n        <li>Влажность:<span> {props.humidity}%</span></li>\r\n        <li>Атмосферное давление:<span> {props.pressure}</span></li>\r\n        <li>Сила и направление ветра:<span> {props.wind}, м/с</span><span style={styles.arrow}> &uarr; </span></li>\r\n        <li>Последнее обновление данных:<br/>\r\n        <span> {props.update.join(' ')}</span></li>\r\n      </ul>\r\n      <div className=\"wrap\">\r\n        <button onClick = {(e) => {\r\n          e.preventDefault()\r\n          removeCity(city)\r\n        }} >Удалить</button>\r\n        <button onClick = {(e) => {\r\n          e.preventDefault()\r\n          updateDate(city)\r\n        }}>Обновить</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nBlock.propTypes = {\r\n  props: PropTypes.object.isRequired,\r\n  removeCity: PropTypes.func,\r\n  updateDate: PropTypes.func,\r\n}\r\n\r\nexport default Block","import React, {useContext} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './content.css'\r\nimport Block from './Block'\r\nimport Context from '../context'\r\n\r\n\r\nfunction Content(){\r\n  const {dataArr} = useContext(Context)\r\n\r\n  \r\n  if(!dataArr){\r\n    return (\r\n      <section></section>\r\n    )\r\n  } else {\r\n    return(\r\n      <section>\r\n        { dataArr.map((e, i) => <Block props={e} key={i}/>) }\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nContent.propTypes = {\r\n  dataArr: PropTypes.arrayOf(PropTypes.object),\r\n}\r\n\r\nexport default Content","import React, {useState, useContext, useEffect} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './widget.css'\r\nimport Context from '../context'\r\n\r\n\r\n\r\nfunction Widget(){\r\n  const {dataArr} = useContext(Context)\r\n  const [visible, setVisible] = useState(false)\r\n  const [data, setData] = useState([])\r\n\r\n  useEffect(() => { setData(dataArr) }, [dataArr])\r\n  \r\n  const temp = data.map(e => e = e.temp).sort((a,b) => a-b)\r\n  const minTemp = data.filter(e => e.temp === temp[0] && true)[0]\r\n  const maxTemp = data.filter(e => e.temp === temp[temp.length - 1] && true)[0]\r\n\r\n  function toOpenClose(){\r\n    setVisible(!visible)\r\n  }\r\n  \r\n  if(visible){\r\n    return(\r\n      <div className='widget'>\r\n        <div className=\"title\">\r\n          <h2>температура</h2>\r\n          <p onClick = {toOpenClose}>&#x274C;</p>\r\n        </div>\r\n        <div className='wrapper'>\r\n          <h4>max температура:</h4>\r\n          <p>{maxTemp.city}<span>{maxTemp.temp}°C</span></p>\r\n          <h4>min температура:</h4>\r\n          <p>{minTemp.city}<span>{minTemp.temp}°C</span></p>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else {\r\n    return(\r\n      <div className='widget'>\r\n        <div className=\"title\">\r\n          <h2>температура</h2>\r\n          <p onClick = {toOpenClose}>&#9776;</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nWidget.propTypes = {\r\n  dataArr: PropTypes.arrayOf(PropTypes.object),\r\n}\r\n\r\nexport default Widget","import React, {useState, useEffect} from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport './index.css'\nimport Content from './components/Content'\nimport Context from './context'\nimport Widget from './components/Widget'\nimport Data from './data.json'\n\n\nfunction App() {\n  const months = ['Января','Февраля','Марта','Апреля','Мая','Июня','Июля','Августа','Сентября','Октября','Ноября','Декабря']\n  const [dataArr, setData] = useState([])\n  const [checked, setChecked] = useState(false)\n  const [listCitys, setListCitys] = useState([])\n\n  useEffect(() => {\n    const localDataArr = localStorage.getItem('dataArr') || []\n    const localDataCitys = localStorage.getItem('listCitys') || []\n    setData(JSON.parse(localDataArr))\n    setListCitys(JSON.parse(localDataCitys))\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('dataArr', JSON.stringify(dataArr))\n  }, [dataArr])\n\n  useEffect(() =>{\n    localStorage.setItem('listCitys', JSON.stringify(listCitys))\n  }, [listCitys])\n\n  useEffect(() => {\n    if(checked){\n      var interval = setInterval(() => {\n        updateAllData()\n      }, 5000)\n      return () => {clearInterval(interval)}\n    } else {\n      clearInterval(interval)\n    }\n  })\n\n  function updateAllData(){\n    for (let i = 0; i < dataArr.length; i++){\n      getData(dataArr[i].city)\n        .then(city => {\n          if(city){\n            dataArr[i] = city\n            setData([...dataArr])\n          }\n        })\n    }\n  } \n\n  function getWeatherData(city){\n    if(Data.some(e => e === city && true)){\n      getData(city).then(dataCity => {\n        if(dataCity){\n          setData ([...dataArr, dataCity])\n          setListCitys([...listCitys, city]) \n        }\n      })\n      const inp = document.querySelector('#input')\n      inp.value = ''\n    }\n  }\n\n  function removeCity(city){\n    const removeArr = dataArr.filter(e => e.city !== city && true)\n    const removeCity = listCitys.filter(e => e !== city && true)\n    setData([...removeArr])\n    setListCitys([...removeCity])\n  }\n\n  function updateDate(city){\n    getData(city)\n      .then(city => {\n        if(city){\n          const update = dataArr.map(elem => (elem.city === city.city)? elem = city : elem)\n          setData([...update])\n        }\n      })\n  }\n\n  async function getData(city){\n    const apiURL = 'https://api.openweathermap.org/data/2.5/';\n    const cityName = city;\n    const apiKey = '012244e216d87e61ae79056438d73ff3';\n    const apiQuery = apiURL + 'weather?q=' + cityName + '&units=metric&lang=ru&appid=' + apiKey;\n    \n    try{\n      const response = await fetch(apiQuery),\n            data = await response.json(),\n            date = new Date()\n\n      return {'city': data.name,\n        'temp': data.main.temp,\n        'icon': data.weather[0].icon,\n        'description': data.weather[0].description,\n        'humidity': data.main.humidity,\n        'pressure': data.main.pressure,\n        'wind': data.wind.speed,\n        'windDeg': data.wind.deg,\n        'update': [date.getDate(), months[date.getMonth()], date.getFullYear(), `${date.getHours()} :`, `${date.getMinutes()} :`, date.getSeconds()]\n      }\n    }\n    catch(error){\n      console.log('Ошибка при передаче данных. Причина:' + error)\n    }\n  }\n\n  return (\n    <Context.Provider \n      value={{dataArr, removeCity, updateDate}}\n    >\n      <Widget/>\n      <Container>\n        <Row>\n          <div className='input'>\n            <input\n              id='input'\n              className='city_name'\n              type='text' \n              autoComplete='false'\n              placeholder='введите название города'\n            />\n            <button \n              type='submit' \n              onClick = {(e) => {\n                e.preventDefault()\n                const inp = document.querySelector('#input')\n                getWeatherData(inp.value)\n              }}\n            >Отправить</button>\n            <div className='cicle_update'>\n              <input \n                type='checkbox' \n                checked = {checked}\n                onChange = {() => setChecked(!checked)}\n              />\n              <p>Автообновление каждые 5с</p>\n            </div>\n          </div>\n          <Content/>\n        </Row>\n      </Container>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}